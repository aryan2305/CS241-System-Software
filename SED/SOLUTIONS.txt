//////FOR HELP IN TERMINAL USE "info sed"

1) sed 's/ernet.in/ac.in/g' email_old.txt > email_new.txt
2) sed 's/\bpublic\b/private/g' QuizProgram.java > QuizProgramNew.java
3) sed 's/!\+/./g' msg.txt
4) sed -r 's/([A-Za-z]+) ([0-9]{1,2}), ([0-9]{4})/\2 \1 \3/g' Appointment_dates.txt
5) sed '/This/d' hello.txt
6) a) sed -n '/10\.5/,/10\.3/p' comm_ind_wi_day3_second_ings.txt   or sed -n '/10\.[3-5]/p' comm_ind_wi_day3_second_ings.txt
   b) sed '/10\.[3-5]/d' comm_ind_wi_day3_second_ings.txt
   c) sed -n '5p' comm_ind_wi_day3_second_ings.txt
   d) sed -n '2,8p' comm_ind_wi_day3_second_ings.txt
   e) sed -n '$p' comm_ind_wi_day3_second_ings.txt
   f) sed -n '9,$p' comm_ind_wi_day3_second_ings.txt
   g) sed '9,11{s/Ashwin/Jadeja/g}' comm_ind_wi_day3_second_ings.txt
7) sed 's/I/We/2g' msg.txt
8) sed -r 's/([0-9]{9}) ([A-Za-z]+)(.*)([0-9]{2})/Roll: \1 Name: \2 Age: \4/g' sed_practice.txt
9) sed -e 's/1/one/g' -e 's/2/two/g' -e 's/3/three/g' digit_word.txt 
10) sed -n '/[aeiou]/p' vowel_fav.txt
11) sed -z 's/\n/@/g' | sed -e 's/Apple iphone/Samsung s8/3' -e 's/Apple iphone/Samsung s8/5' | sed 's/@/\n/g' 
12) sed -e 's/^@(.)(*)/@\2/g' digit.txt


/*********Some basic sed operation apart from assignment problem**************/
SED
    $sed 's/unix/linux/' geekfile.txt   to replace  1st occurence of unix in every line with linux
    $sed 's/unix/linux/n' geekfile.txt  to replace  nth occurence of unix in every line with linux
    $sed 's/unix/linux/g' geekfile.txt  to replace all occurences of unix in every line with linux
    $sed 's/unix/linux/3g' geekfile.txt  to replace all occurences from nth of unix in every line with linux
    \(...\) would capture the characters specified inside of the parens and \1 would be used to reference the first match, this is a part of regex.
    can work with only brackets Also
    If two captures inside brackets then use \2 for second capture
    \b marks the end of word 
    $ echo "Welcome To The Geek Stuff" | sed 's/\(\b[A-Z]\)/\(\1\)/g'  prints (W)elcome (T)o (T)he (G)eek (S)tuff
    echo "Welcome To The Geek Stuff" | sed 's/\(\b[A-Z]\)/(\1\)/g'     prints (W)elcome (T)o (T)he (G)eek (S)tuff
    $sed '3 s/unix/linux/g' geekfile.txt    replce unix with linux on line 3
    $sed 's/unix/linux/p' geekfile.txt    prints replaces twice if line is not replaced then printed only once
    $sed -n 's/unix/linux/p' geekfile.txt  displays only replaced lines not the duplicate ones
    $sed '1,3 s/unix/linux/' geekfile.txt    change on a range of lines
    $ sed 'nd' filename.txt                  deletes line n from the file
    $ sed '$d' filename.txt                  deletes last line
    $ sed '3,6d' filename.txt  deletes lines from 3 to 6
    $ sed '/pattern/d' filename.txt    deletes lines with matching patterns





Sed uses regular expressions in the “search” part of the substitution syntax. Most characters in regular expressions match with input data literally; however, there are some sequences that carry special significance. If you want to match these characters literally you can use the escape character \ to transform the next character into a literal match. Consider the following characters with special significance in sed substitution scripts:

1. The . symbol matches any character.
2. The * symbol causes the character immediately proceeding this character to successfully match to zero or more instances of that character in the data set.
3. The + symbol causes the character immediately proceeding this character to successfully match to one or more instances of that character in the data set.
4. Square brackets ([]) enclose a set of characters that match against any member of the set of specified characters. When prefaced with a caret, as in [^abc], it matches none of the characters specified in the set.
5. Parenthetical characters (left ( or right )) both allow you to write more complex expressions and also create “captures” that allow you to use sequences from the matched text in the replacement string. Captured sequences are available in the order that they were captured with \[number] where [number] corresponds to the number of the capture.
6. The ^ character matches the beginning of a line.
7. The $ character matches the end of a line.
8. The \ character, as previously stated, escapes the following character for literal matching if it caries additional meaning.
9. The | character provides an “OR” operator, so the sequence ^(www|ftp)\. would match a line that began with the characters www or ftp.

 
